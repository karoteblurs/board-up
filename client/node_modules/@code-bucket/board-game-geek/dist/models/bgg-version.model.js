import { BggLink, BggLinkType } from './bgg-link.model';
import { BggName, BggNameType } from './bgg-name.model';
/**
 * Parsed version from bgg xml data
 */
var BggVersion = /** @class */ (function () {
    function BggVersion(data) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.id = Number.parseInt(data._attributes.id);
        this.type = data._attributes.type;
        this.thumbnail = (_a = data.thumbnail) === null || _a === void 0 ? void 0 : _a._text.trim();
        this.image = (_b = data.image) === null || _b === void 0 ? void 0 : _b._text.trim();
        this.links = data.link
            ? Array.isArray(data.link)
                ? data.link.map(function (link) { return new BggLink(link); })
                : [new BggLink(data.link)]
            : [];
        this.names = data.name
            ? Array.isArray(data.name)
                ? data.name.map(function (name) { return new BggName(name); })
                : [new BggName(data.name)]
            : [];
        this.yearpublished = data.yearpublished ? Number.parseInt(data.yearpublished._attributes.value) : undefined;
        this.productcode = (_c = data.productcode) === null || _c === void 0 ? void 0 : _c._attributes.value;
        this.width = data.width
            ? Number.parseFloat((_d = data.width) === null || _d === void 0 ? void 0 : _d._attributes.value)
            : undefined;
        this.length = data.length
            ? Number.parseFloat((_e = data.length) === null || _e === void 0 ? void 0 : _e._attributes.value)
            : undefined;
        this.depth = data.depth
            ? Number.parseFloat((_f = data.depth) === null || _f === void 0 ? void 0 : _f._attributes.value)
            : undefined;
        this.weight = data.weight
            ? Number.parseFloat((_g = data.weight) === null || _g === void 0 ? void 0 : _g._attributes.value)
            : undefined;
    }
    Object.defineProperty(BggVersion.prototype, "namesValues", {
        // Getters
        get: function () {
            return this.names.map(function (name) { return name.value; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggVersion.prototype, "primaryName", {
        get: function () {
            var _a;
            return (_a = this.names.find(function (name) { return name.type === BggNameType.primary; })) === null || _a === void 0 ? void 0 : _a.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggVersion.prototype, "versionFor", {
        get: function () {
            return this.links.find(function (link) { return link.type === BggLinkType.boardGameVersion; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggVersion.prototype, "artists", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameArtist; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggVersion.prototype, "publishers", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGamePublisher; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggVersion.prototype, "languages", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.language; });
        },
        enumerable: false,
        configurable: true
    });
    return BggVersion;
}());
export { BggVersion };
//# sourceMappingURL=bgg-version.model.js.map