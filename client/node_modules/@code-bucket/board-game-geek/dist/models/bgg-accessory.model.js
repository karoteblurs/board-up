import { BggVersion } from './bgg-version.model';
import { BggLink, BggLinkType } from './bgg-link.model';
import { BggName, BggNameType } from './bgg-name.model';
var BggAccessory = /** @class */ (function () {
    function BggAccessory(data) {
        var _a, _b;
        this.id = Number.parseInt(data._attributes.id);
        this.type = data._attributes.type;
        this.thumbnail = (_a = data.thumbnail) === null || _a === void 0 ? void 0 : _a._text.trim();
        this.image = (_b = data.image) === null || _b === void 0 ? void 0 : _b._text.trim();
        this.links = Array.isArray(data.link)
            ? data.link.map(function (link) { return new BggLink(link); })
            : [new BggLink(data.link)];
        this.names = Array.isArray(data.name)
            ? data.name.map(function (name) { return new BggName(name); })
            : [new BggName(data.name)];
        this.yearpublished = data.yearpublished ? Number.parseInt(data.yearpublished._attributes.value) : undefined;
        this.description = data.description._text.trim();
        this.versions = Array.isArray(data.versions.item)
            ? data.versions.item.map(function (version) { return new BggVersion(version); })
            : [new BggVersion(data.versions.item)];
    }
    Object.defineProperty(BggAccessory.prototype, "namesValues", {
        // Getters
        get: function () {
            return this.names.map(function (name) { return name.value; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggAccessory.prototype, "primaryName", {
        get: function () {
            var _a;
            return (_a = this.names.find(function (name) { return name.type === BggNameType.primary; })) === null || _a === void 0 ? void 0 : _a.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggAccessory.prototype, "publishers", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGamePublisher; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggAccessory.prototype, "accessoryFor", {
        get: function () {
            return this.links.find(function (link) { return link.type === BggLinkType.boardGameAccessory; });
        },
        enumerable: false,
        configurable: true
    });
    return BggAccessory;
}());
export { BggAccessory };
//# sourceMappingURL=bgg-accessory.model.js.map