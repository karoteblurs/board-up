import { BggGame } from './bgg-game.model';
import { BggAccessory } from './bgg-accessory.model';
import { BggExpansion } from './bgg-expansion.model';
import { BggThingType } from './bgg-thing.type';
var BggThingResponse = /** @class */ (function () {
    function BggThingResponse(data) {
        var _this = this;
        if (Array.isArray(data.items.item)) {
            this.items = data.items.item.map(function (item) { return _this.parseItem(item); });
        }
        else {
            this.items = [this.parseItem(data.items.item)];
        }
    }
    Object.defineProperty(BggThingResponse.prototype, "item", {
        /**
         * Alias for this.items[0]. Use only if you know there is only one item in response
         */
        get: function () {
            return this.items[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggThingResponse.prototype, "type", {
        /**
         * Alias for this.item.type
         */
        get: function () {
            var _a;
            return (_a = this.item) === null || _a === void 0 ? void 0 : _a.type;
        },
        enumerable: false,
        configurable: true
    });
    BggThingResponse.prototype.parseItem = function (item) {
        var type = item._attributes.type;
        switch (type) {
            case BggThingType.boardGame:
                return new BggGame(item);
            case BggThingType.boardGameExpansion:
                return new BggExpansion(item);
            case BggThingType.boardGameAccessory:
                return new BggAccessory(item);
        }
    };
    return BggThingResponse;
}());
export { BggThingResponse };
//# sourceMappingURL=bgg-thing-response.model.js.map