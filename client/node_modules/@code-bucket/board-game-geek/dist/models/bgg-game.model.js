import { BggPoll } from './bgg-poll.model';
import { BggVersion } from './bgg-version.model';
import { BggLink, BggLinkType } from './bgg-link.model';
import { BggName, BggNameType } from './bgg-name.model';
/**
 * Parsed game from bgg xml data
 */
var BggGame = /** @class */ (function () {
    function BggGame(data) {
        this.id = Number.parseInt(data._attributes.id);
        this.type = data._attributes.type;
        this.thumbnail = data.thumbnail._text.trim();
        this.image = data.image._text.trim();
        this.links = Array.isArray(data.link)
            ? data.link.map(function (link) { return new BggLink(link); })
            : [new BggLink(data.link)];
        this.names = Array.isArray(data.name)
            ? data.name.map(function (name) { return new BggName(name); })
            : [new BggName(data.name)];
        this.yearpublished = data.yearpublished ? Number.parseInt(data.yearpublished._attributes.value) : undefined;
        this.description = data.description._text.trim();
        this.minplayers = Number.parseInt(data.minplayers._attributes.value);
        this.maxplayers = Number.parseInt(data.maxplayers._attributes.value);
        this.polls = data.poll.map(function (poll) { return new BggPoll(poll); });
        this.playingtime = Number.parseInt(data.playingtime._attributes.value);
        this.minplaytime = Number.parseInt(data.minplaytime._attributes.value);
        this.maxplaytime = Number.parseInt(data.maxplaytime._attributes.value);
        this.minage = Number.parseInt(data.minage._attributes.value);
        this.versions = Array.isArray(data.versions.item)
            ? data.versions.item.map(function (version) { return new BggVersion(version); })
            : [new BggVersion(data.versions.item)];
    }
    Object.defineProperty(BggGame.prototype, "namesValues", {
        // Getters
        get: function () {
            return this.names.map(function (name) { return name.value; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "primaryName", {
        get: function () {
            var _a;
            return (_a = this.names.find(function (name) { return name.type === BggNameType.primary; })) === null || _a === void 0 ? void 0 : _a.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "categories", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameCategory; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "mechanics", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameMechanic; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "families", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameFamily; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "expansions", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameExpansion; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "implementations", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameImplementation; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "designers", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameDesigner; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "artists", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGameArtist; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BggGame.prototype, "publishers", {
        get: function () {
            return this.links.filter(function (link) { return link.type === BggLinkType.boardGamePublisher; });
        },
        enumerable: false,
        configurable: true
    });
    return BggGame;
}());
export { BggGame };
//# sourceMappingURL=bgg-game.model.js.map